name: 🔍 Security - Advanced Secret Scanning with Dashboard Integration

on:
  push:
    branches: ["main", "master", "develop", "staging"]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'docs/**'
  pull_request:
    branches: ["main", "master", "develop", "staging"]
  workflow_dispatch:
    inputs:
      scan_depth:
        description: 'Scan depth (quick/full)'
        required: false
        default: 'full'
        type: choice
        options:
        - quick
        - full
      dashboard_report:
        description: 'Send results to dashboard'
        required: false
        default: true
        type: boolean

permissions:
  contents: read
  pull-requests: write
  checks: write
  security-events: write
  id-token: write

env:
  SCANNER_IMAGE: canary-scanner
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  REGISTRY_URL: ${{ secrets.CONTAINER_REGISTRY_URL || 'ghcr.io' }}
  IMAGE_TAG: ${{ github.sha }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ===== PRE-SCAN VALIDATION =====
  pre-scan-validation:
    name: 🔍 Pre-Scan Validation
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      scan-required: ${{ steps.changes.outputs.scan-required }}
      dashboard-enabled: ${{ steps.config.outputs.dashboard-enabled }}
      cloud-provider: ${{ steps.config.outputs.cloud-provider }}
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Detect File Changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            scan-required:
              - '**/*.py'
              - '**/*.js'
              - '**/*.ts'
              - '**/*.json'
              - '**/*.yml'
              - '**/*.yaml'
              - '**/*.env*'
              - '**/*.config'
              - '**/*.conf'
              - 'Dockerfile*'
              - '**/*.sh'

      - name: ⚙️ Configure Scan Parameters
        id: config
        run: |
          # Determine if dashboard is enabled
          DASHBOARD_ENABLED="false"
          if [[ -n "${{ secrets.DASHBOARD_API_URL }}" ]] || [[ "${{ github.event.inputs.dashboard_report }}" == "true" ]]; then
            DASHBOARD_ENABLED="true"
          fi
          echo "dashboard-enabled=${DASHBOARD_ENABLED}" >> $GITHUB_OUTPUT
          
          # Detect cloud provider from repository secrets
          CLOUD_PROVIDER="local"
          if [[ -n "${{ secrets.AWS_ACCOUNT_ID }}" ]]; then
            CLOUD_PROVIDER="aws"
          elif [[ -n "${{ secrets.AZURE_SUBSCRIPTION_ID }}" ]]; then
            CLOUD_PROVIDER="azure"
          elif [[ -n "${{ secrets.GCP_PROJECT_ID }}" ]]; then
            CLOUD_PROVIDER="gcp"
          fi
          echo "cloud-provider=${CLOUD_PROVIDER}" >> $GITHUB_OUTPUT
          
          echo "🔧 Dashboard Integration: ${DASHBOARD_ENABLED}"
          echo "☁️ Cloud Provider: ${CLOUD_PROVIDER}"

  # ===== BUILD ENHANCED SCANNER =====
  build-scanner:
    name: 🐳 Build Advanced Scanner
    runs-on: ubuntu-latest
    needs: pre-scan-validation
    if: needs.pre-scan-validation.outputs.scan-required == 'true'
    timeout-minutes: 15
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ env.IMAGE_TAG }}
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      - name: 🔐 Configure Container Registry
        if: env.REGISTRY_URL != 'ghcr.io'
        run: |
          case "${{ needs.pre-scan-validation.outputs.cloud-provider }}" in
            aws)
              echo "REGISTRY_LOGIN_SERVER=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com" >> $GITHUB_ENV
              ;;
            azure)
              echo "REGISTRY_LOGIN_SERVER=${{ secrets.AZURE_CONTAINER_REGISTRY }}" >> $GITHUB_ENV
              ;;
            gcp)
              echo "REGISTRY_LOGIN_SERVER=gcr.io/${{ secrets.GCP_PROJECT_ID }}" >> $GITHUB_ENV
              ;;
          esac

      - name: 🔑 Login to Container Registry
        if: env.REGISTRY_URL != 'ghcr.io'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: 🔑 Login to GitHub Container Registry
        if: env.REGISTRY_URL == 'ghcr.io'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_URL }}/${{ github.repository_owner }}/canary-scanner
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🐳 Build and Push Scanner Image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

      - name: 🧪 Test Scanner Image
        run: |
          # Pull the built image and run smoke tests
          docker pull ${{ env.REGISTRY_URL }}/${{ github.repository_owner }}/canary-scanner:${{ env.IMAGE_TAG }}
          
          # Version check
          docker run --rm ${{ env.REGISTRY_URL }}/${{ github.repository_owner }}/canary-scanner:${{ env.IMAGE_TAG }} --version
          
          # Pattern loading test
          docker run --rm ${{ env.REGISTRY_URL }}/${{ github.repository_owner }}/canary-scanner:${{ env.IMAGE_TAG }} --help

      - name: 🔍 Security Scan Image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY_URL }}/${{ github.repository_owner }}/canary-scanner:${{ env.IMAGE_TAG }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Security Scan Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ===== ADVANCED SECRET SCANNING =====
  secret-scan:
    name: 🔍 Advanced Secret Detection
    runs-on: ubuntu-latest
    needs: [pre-scan-validation, build-scanner]
    if: needs.pre-scan-validation.outputs.scan-required == 'true'
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        scan_mode: [
          { name: "critical", args: "--fail-on high --patterns-file patterns.yml" },
          { name: "comprehensive", args: "--fail-on medium --patterns-file patterns.yml" }
        ]
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Scan Environment
        run: |
          mkdir -p scan-results reports
          echo "SCAN_TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_ENV
          echo "SCAN_ID=$(uuidgen)" >> $GITHUB_ENV

      - name: 🔑 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_URL == 'ghcr.io' && 'ghcr.io' || env.REGISTRY_LOGIN_SERVER }}
          username: ${{ env.REGISTRY_URL == 'ghcr.io' && github.actor || secrets.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_URL == 'ghcr.io' && secrets.GITHUB_TOKEN || secrets.REGISTRY_PASSWORD }}

      - name: 📥 Pull Scanner Image
        run: |
          docker pull ${{ env.REGISTRY_URL }}/${{ github.repository_owner }}/canary-scanner:${{ env.IMAGE_TAG }}

      - name: 🔍 Execute Advanced Scan (${{ matrix.scan_mode.name }})
        id: scan
        continue-on-error: true
        env:
          DASHBOARD_API_URL: ${{ secrets.DASHBOARD_API_URL }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          set -e
          
          # Prepare dashboard integration arguments
          dashboard_args=""
          if [[ "${{ needs.pre-scan-validation.outputs.dashboard-enabled }}" == "true" ]] && [[ -n "${DASHBOARD_API_URL}" ]]; then
            dashboard_args="--report-url ${DASHBOARD_API_URL} --repository ${GITHUB_REPOSITORY} --commit ${GITHUB_SHA} --branch ${GITHUB_REF_NAME}"
          fi
          
          # Enhanced scan with cloud optimizations
          scan_start=$(date +%s)
          
          docker run --rm \
            --name "canary-scan-${{ matrix.scan_mode.name }}-${GITHUB_RUN_ID}" \
            --volume "${GITHUB_WORKSPACE}:/scan:ro" \
            --volume "${GITHUB_WORKSPACE}/scan-results:/results" \
            --env SCAN_MODE="${{ matrix.scan_mode.name }}" \
            --env SCAN_ID="${SCAN_ID}" \
            --env GITHUB_REPOSITORY="${GITHUB_REPOSITORY}" \
            --env GITHUB_SHA="${GITHUB_SHA}" \
            --env GITHUB_REF_NAME="${GITHUB_REF_NAME}" \
            --env GITHUB_ACTOR="${GITHUB_ACTOR}" \
            --env DASHBOARD_API_URL="${DASHBOARD_API_URL}" \
            ${{ env.REGISTRY_URL }}/${{ github.repository_owner }}/canary-scanner:${{ env.IMAGE_TAG }} \
            /scan \
            --ci-mode \
            --output-json \
            ${{ matrix.scan_mode.args }} \
            ${dashboard_args} \
            > scan-results/results-${{ matrix.scan_mode.name }}.json 2>&1
          
          scan_end=$(date +%s)
          scan_duration=$((scan_end - scan_start))
          echo "scan-duration=${scan_duration}" >> $GITHUB_OUTPUT
          
          # Process scan results
          if [[ -f "scan-results/results-${{ matrix.scan_mode.name }}.json" ]]; then
            echo "✅ Scan completed successfully (${{ matrix.scan_mode.name }} mode)"
            echo "⏱️ Duration: ${scan_duration} seconds"
          else
            echo "❌ Scan failed - no results file generated"
            exit 1
          fi

      - name: 📊 Parse and Analyze Results
        id: analyze
        run: |
          results_file="scan-results/results-${{ matrix.scan_mode.name }}.json"
          
          if [[ -f "${results_file}" ]]; then
            # Extract key metrics using jq
            total_findings=$(jq -r '.scan_metadata.total_findings // 0' "${results_file}")
            critical_findings=$(jq -r '.severity_breakdown.critical // 0' "${results_file}")
            medium_findings=$(jq -r '.severity_breakdown.medium // 0' "${results_file}")
            low_findings=$(jq -r '.severity_breakdown.low // 0' "${results_file}")
            
            # Dashboard information
            dashboard_url=$(jq -r '.dashboard_info.results_url // empty' "${results_file}")
            dashboard_scan_id=$(jq -r '.dashboard_info.scan_id // empty' "${results_file}")
            
            # Repository statistics
            files_scanned=$(jq -r '.scanner_statistics.files_scanned // 0' "${results_file}")
            patterns_matched=$(jq -r '.scanner_statistics.patterns_matched // 0' "${results_file}")
            
            # Export results
            echo "total-findings=${total_findings}" >> $GITHUB_OUTPUT
            echo "critical-findings=${critical_findings}" >> $GITHUB_OUTPUT
            echo "medium-findings=${medium_findings}" >> $GITHUB_OUTPUT
            echo "low-findings=${low_findings}" >> $GITHUB_OUTPUT
            echo "dashboard-url=${dashboard_url}" >> $GITHUB_OUTPUT
            echo "dashboard-scan-id=${dashboard_scan_id}" >> $GITHUB_OUTPUT
            echo "files-scanned=${files_scanned}" >> $GITHUB_OUTPUT
            echo "patterns-matched=${patterns_matched}" >> $GITHUB_OUTPUT
            
            # Generate summary report
            cat > "reports/scan-summary-${{ matrix.scan_mode.name }}.md" << EOF
          # 🔍 Canary Scan Report - ${{ matrix.scan_mode.name }} Mode
          
          ## 📊 Scan Metrics
          - **Repository**: \`${GITHUB_REPOSITORY}\`
          - **Branch**: \`${GITHUB_REF_NAME}\`
          - **Commit**: \`${GITHUB_SHA:0:8}\`
          - **Timestamp**: \`${SCAN_TIMESTAMP}\`
          - **Duration**: \`${{ steps.scan.outputs.scan-duration }} seconds\`
          - **Files Scanned**: \`${files_scanned}\`
          
          ## 🚨 Security Findings
          - **Total Findings**: ${total_findings}
          - **🔴 Critical (High)**: ${critical_findings}
          - **🟡 Medium**: ${medium_findings}
          - **🔵 Low**: ${low_findings}
          
          ## 📈 Dashboard Integration
          ${dashboard_url:+- **Dashboard URL**: [View Results](${dashboard_url})}
          ${dashboard_scan_id:+- **Scan ID**: \`${dashboard_scan_id}\`}
          
          ---
          _Generated by Canary Scanner v3.0 at $(date -u)_
          EOF
            
          else
            echo "❌ No results file found for analysis"
            exit 1
          fi

      - name: 📊 Generate Security Insights
        if: steps.analyze.outputs.total-findings != '0'
        run: |
          results_file="scan-results/results-${{ matrix.scan_mode.name }}.json"
          
          # Extract detailed findings for analysis
          jq -r '.findings[] | "File: \(.file_path):\(.line_number) | Rule: \(.rule_id) | Confidence: \(.confidence) | Description: \(.description)"' \
            "${results_file}" > "reports/findings-${{ matrix.scan_mode.name }}.txt"
          
          # Generate finding trends if multiple scans
          if [[ -f "reports/historical-findings.json" ]]; then
            jq -s 'add' "reports/historical-findings.json" "${results_file}" > "reports/historical-findings-updated.json"
            mv "reports/historical-findings-updated.json" "reports/historical-findings.json"
          else
            cp "${results_file}" "reports/historical-findings.json"
          fi

      - name: 🔒 Security Gates and Compliance
        id: security-gate
        run: |
          critical_count="${{ steps.analyze.outputs.critical-findings }}"
          medium_count="${{ steps.analyze.outputs.medium-findings }}"
          
          # Define security thresholds based on scan mode
          case "${{ matrix.scan_mode.name }}" in
            critical)
              if [[ ${critical_count} -gt 0 ]]; then
                echo "🚫 CRITICAL SECURITY GATE FAILED"
                echo "Critical findings detected: ${critical_count}"
                echo "gate-status=failed" >> $GITHUB_OUTPUT
                echo "gate-reason=Critical security vulnerabilities found" >> $GITHUB_OUTPUT
                exit 1
              fi
              ;;
            comprehensive)
              total_high_medium=$((critical_count + medium_count))
              if [[ ${total_high_medium} -gt 5 ]]; then
                echo "⚠️ COMPREHENSIVE SECURITY GATE WARNING"
                echo "High/Medium findings exceed threshold: ${total_high_medium}"
                echo "gate-status=warning" >> $GITHUB_OUTPUT
                echo "gate-reason=Security findings exceed recommended threshold" >> $GITHUB_OUTPUT
              fi
              ;;
          esac
          
          echo "✅ Security gate passed for ${{ matrix.scan_mode.name }} mode"
          echo "gate-status=passed" >> $GITHUB_OUTPUT

      - name: 📁 Upload Scan Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: scan-results-${{ matrix.scan_mode.name }}-${{ github.run_id }}
          path: |
            scan-results/
            reports/
          retention-days: 30
          compression-level: 6

      - name: 🔍 Upload to GitHub Security Tab
        if: steps.analyze.outputs.total-findings != '0'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: scan-results/canary-findings.sarif
        continue-on-error: true

  # ===== ENHANCED REPORTING =====
  generate-reports:
    name: 📊 Generate Enhanced Reports
    runs-on: ubuntu-latest
    needs: [pre-scan-validation, secret-scan]
    if: always() && needs.pre-scan-validation.outputs.scan-required == 'true'
    timeout-minutes: 10
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📥 Download All Scan Results
        uses: actions/download-artifact@v4
        with:
          pattern: scan-results-*
          path: aggregated-results
          merge-multiple: true

      - name: 📊 Generate Comprehensive Report
        run: |
          mkdir -p final-reports
          
          # Aggregate results from all scan modes
          total_critical=0
          total_medium=0
          total_low=0
          total_files=0
          scan_modes=""
          
          for results_file in aggregated-results/scan-results/results-*.json; do
            if [[ -f "${results_file}" ]]; then
              mode=$(basename "${results_file}" .json | sed 's/results-//')
              scan_modes="${scan_modes} ${mode}"
              
              critical=$(jq -r '.severity_breakdown.critical // 0' "${results_file}")
              medium=$(jq -r '.severity_breakdown.medium // 0' "${results_file}")
              low=$(jq -r '.severity_breakdown.low // 0' "${results_file}")
              files=$(jq -r '.scanner_statistics.files_scanned // 0' "${results_file}")
              
              total_critical=$((total_critical + critical))
              total_medium=$((total_medium + medium))
              total_low=$((total_low + low))
              total_files=$((total_files > files ? total_files : files))
            fi
          done
          
          total_findings=$((total_critical + total_medium + total_low))
          
          # Generate executive summary
          cat > final-reports/executive-summary.md << EOF
          # 🛡️ Canary Security Scan - Executive Summary
          
          ## 🎯 Scan Overview
          - **Repository**: \`${GITHUB_REPOSITORY}\`
          - **Branch**: \`${GITHUB_REF_NAME}\`
          - **Commit**: \`${GITHUB_SHA}\`
          - **Scan Modes**: ${scan_modes}
          - **Files Analyzed**: \`${total_files}\`
          - **Timestamp**: \`$(date -u)\`
          
          ## 🚨 Security Posture
          | Severity | Count | Status |
          |----------|-------|--------|
          | 🔴 Critical | ${total_critical} | ${total_critical -gt 0 && echo "❌ ATTENTION REQUIRED" || echo "✅ CLEAR"} |
          | 🟡 Medium | ${total_medium} | ${total_medium -gt 3 && echo "⚠️ REVIEW NEEDED" || echo "✅ ACCEPTABLE"} |
          | 🔵 Low | ${total_low} | ℹ️ INFORMATIONAL |
          | **TOTAL** | **${total_findings}** | ${total_findings -eq 0 && echo "✅ SECURE" || echo "⚠️ REVIEW REQUIRED"} |
          
          ## 📈 Risk Assessment
          $(if [[ ${total_critical} -gt 0 ]]; then
            echo "🚨 **HIGH RISK**: Critical security vulnerabilities detected"
            echo "- Immediate remediation required before deployment"
            echo "- Credential rotation may be necessary"
          elif [[ ${total_medium} -gt 5 ]]; then
            echo "⚠️ **MEDIUM RISK**: Multiple medium-severity findings"
            echo "- Review and remediation recommended"
            echo "- Consider security team consultation"
          elif [[ ${total_findings} -gt 0 ]]; then
            echo "ℹ️ **LOW RISK**: Minor security findings detected"
            echo "- Address during next development cycle"
          else
            echo "✅ **SECURE**: No security vulnerabilities detected"
            echo "- Repository meets security standards"
          fi)
          
          ## 🔗 Dashboard Integration
          ${needs.pre-scan-validation.outputs.dashboard-enabled == 'true' && echo "📊 [View Detailed Results on Dashboard](${{ secrets.DASHBOARD_API_URL }})" || echo "📊 Dashboard integration not configured"}
          
          ---
          _Report generated by Canary Scanner v3.0 • $(date -u)_
          EOF

      - name: 💬 Create PR Comment (Enhanced)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Read the executive summary
            let summary = '';
            try {
              summary = fs.readFileSync('final-reports/executive-summary.md', 'utf8');
            } catch (error) {
              summary = '⚠️ Failed to generate scan summary';
            }
            
            // Add PR-specific context
            const prComment = `
            ## 🔍 Canary Security Scan Results
            
            **Pull Request**: #${{ github.event.number }}
            **Triggered by**: @${{ github.actor }}
            **Commit**: \`${{ github.sha }}\`
            
            ${summary}
            
            ### 🚀 Next Steps
            ${summary.includes('CRITICAL') ? '1. 🛑 **DO NOT MERGE** - Critical vulnerabilities must be addressed' : ''}
            ${summary.includes('MEDIUM RISK') ? '1. ⚠️ Review medium-risk findings before merge' : ''}
            ${summary.includes('SECURE') ? '1. ✅ Security scan passed - safe to merge' : ''}
            
            <details>
            <summary>🔧 Scan Configuration</summary>
            
            - **Scanner Version**: 3.0.0
            - **Cloud Provider**: ${{ needs.pre-scan-validation.outputs.cloud-provider }}
            - **Dashboard Enabled**: ${{ needs.pre-scan-validation.outputs.dashboard-enabled }}
            - **Scan Modes**: Critical + Comprehensive
            </details>
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: prComment
            });

      - name: 📊 Job Summary (Enhanced)
        run: |
          cat final-reports/executive-summary.md >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔧 Advanced Scan Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Cloud Provider**: ${{ needs.pre-scan-validation.outputs.cloud-provider }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dashboard Integration**: ${{ needs.pre-scan-validation.outputs.dashboard-enabled }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Container Registry**: \`${{ env.REGISTRY_URL }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Scan Duration**: ${{ needs.secret-scan.outputs.scan-duration || 'N/A' }} seconds" >> $GITHUB_STEP_SUMMARY

      - name: 📁 Upload Final Reports
        uses: actions/upload-artifact@v4
        with:
          name: canary-security-reports-${{ github.run_id }}
          path: final-reports/
          retention-days: 90

  # ===== DEPLOYMENT NOTIFICATIONS =====
  notification-dispatch:
    name: 📢 Enhanced Notifications
    runs-on: ubuntu-latest
    needs: [secret-scan, generate-reports]
    if: always()
    timeout-minutes: 5
    steps:
      - name: 📊 Collect Scan Results
        run: |
          # Aggregate final results for notifications
          echo "SCAN_STATUS=${{ needs.secret-scan.result }}" >> $GITHUB_ENV
          echo "REPORT_STATUS=${{ needs.generate-reports.result }}" >> $GITHUB_ENV

      - name: 📢 Slack Notification (Advanced)
        if: secrets.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ env.SCAN_STATUS == 'success' && 'success' || 'failure' }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          channel: '#security-alerts'
          username: 'Canary Security Scanner'
          icon_emoji: ':canary:'
          text: |
            🔍 **Advanced Security Scan Completed**
            
            **Repository**: `${{ github.repository }}`
            **Branch**: `${{ github.ref_name }}`
            **Actor**: @${{ github.actor }}
            **Status**: ${{ env.SCAN_STATUS == 'success' && '✅ PASSED' || '❌ FAILED' }}
            
            ${{ needs.pre-scan-validation.outputs.dashboard-enabled == 'true' && format('📊 [View Dashboard Results]({0})', secrets.DASHBOARD_API_URL) || '' }}
            
            🔗 [View Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

      - name: 📧 Email Notification (Critical Findings)
        if: env.SCAN_STATUS != 'success' && secrets.NOTIFICATION_EMAIL != ''
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: '🚨 Critical Security Alert - ${{ github.repository }}'
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: 'canary-scanner@${{ github.repository_owner }}.com'
          html_body: |
            <h2>🚨 Critical Security Alert</h2>
            <p><strong>Repository:</strong> ${{ github.repository }}</p>
            <p><strong>Branch:</strong> ${{ github.ref_name }}</p>
            <p><strong>Commit:</strong> ${{ github.sha }}</p>
            <p><strong>Status:</strong> Security scan failed</p>
            
            <h3>🔗 Quick Actions</h3>
            <ul>
              <li><a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">View Workflow Details</a></li>
              ${{ needs.pre-scan-validation.outputs.dashboard-enabled == 'true' && format('<li><a href="%s">View Dashboard Results</a></li>', secrets.DASHBOARD_API_URL) || '' }}
              <li><a href="${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}">View Commit</a></li>
            </ul>
            
            <p><em>Automated alert from Canary Security Scanner v3.0</em></p>

  # ===== SECURITY GATE ENFORCEMENT =====
  security-gate:
    name: 🚫 Security Gate Enforcement
    runs-on: ubuntu-latest
    needs: [secret-scan, generate-reports]
    if: always()
    timeout-minutes: 5
    steps:
      - name: 🔍 Evaluate Security Posture
        run: |
          SCAN_RESULT="${{ needs.secret-scan.result }}"
          
          echo "🔍 Evaluating security scan results..."
          echo "Scan Result: ${SCAN_RESULT}"
          
          if [[ "${SCAN_RESULT}" == "failure" ]]; then
            echo "🚫 SECURITY GATE FAILED"
            echo "Critical security vulnerabilities detected."
            echo "Deployment is blocked until vulnerabilities are resolved."
            exit 1
          elif [[ "${SCAN_RESULT}" == "success" ]]; then
            echo "✅ SECURITY GATE PASSED"
            echo "No critical vulnerabilities detected."
            echo "Deployment approved from security perspective."
          else
            echo "⚠️ SECURITY GATE INCONCLUSIVE"
            echo "Scan did not complete successfully."
            echo "Manual review required before deployment."
            exit 1
          fi

      - name: 🏷️ Update Deployment Status
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        run: |
          echo "🏷️ Updating deployment readiness status..."
          echo "DEPLOYMENT_READY=true" >> $GITHUB_ENV
          
          # Could integrate with deployment systems here
          # Example: Update deployment flags in cloud platforms

    
