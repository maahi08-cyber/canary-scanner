# =================================================================
# Canary Scanner - GitHub Actions CI/CD Workflow
# =================================================================
# Automated secret scanning pipeline for continuous security
# Features:
# - Multi-job pipeline with security gates
# - Docker containerization and caching
# - PR status checks and comments
# - Artifact management and retention
# - Comprehensive error handling

name: 🔍 Security - Secret Scanning

# =================================================================
# WORKFLOW TRIGGERS
# =================================================================
on:
  # Trigger on pushes to main/master branches
  push:
    branches: [ "main", "master", "develop" ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'examples/**'

  # Trigger on pull requests targeting main branches
  pull_request:
    branches: [ "main", "master", "develop" ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'examples/**'

  # Allow manual workflow dispatch for testing
  workflow_dispatch:
    inputs:
      scan_path:
        description: 'Path to scan (default: entire repository)'
        required: false
        default: '.'
      fail_threshold:
        description: 'Failure threshold (any/high/medium)'
        required: false
        default: 'medium'

# =================================================================
# SECURITY PERMISSIONS (PRINCIPLE OF LEAST PRIVILEGE)
# =================================================================
permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write
  checks: write

# =================================================================
# ENVIRONMENT VARIABLES
# =================================================================
env:
  SCANNER_IMAGE: canary-scanner
  PYTHON_VERSION: '3.11'

# =================================================================
# WORKFLOW JOBS
# =================================================================
jobs:
  # =================================================================
  # JOB 1: BUILD SCANNER IMAGE
  # =================================================================
  build-scanner:
    name: 🐳 Build Scanner Image
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository code
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      # Step 2: Set up Docker Buildx for advanced features
      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      # Step 3: Build Docker image with caching
      - name: 🐳 Build Scanner Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ env.SCANNER_IMAGE }}:latest
          outputs: type=docker,dest=/tmp/scanner-image.tar
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      # Step 4: Test image functionality
      - name: 🧪 Test Scanner Image
        run: |
          docker load --input /tmp/scanner-image.tar
          docker run --rm ${{ env.SCANNER_IMAGE }}:latest --version

      # Step 5: Upload image artifact for next job
      - name: 📦 Upload Scanner Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: scanner-image
          path: /tmp/scanner-image.tar
          retention-days: 1
          compression-level: 6

  # =================================================================
  # JOB 2: SECRET SCANNING
  # =================================================================
  secret-scan:
    name: 🔍 Scan for Secrets
    runs-on: ubuntu-latest
    needs: build-scanner

    # Set timeout to prevent hanging workflows
    timeout-minutes: 15

    # Define job outputs for downstream jobs
    outputs:
      scan-result: ${{ steps.scan.outcome }}
      findings-count: ${{ steps.scan-summary.outputs.findings-count }}
      critical-count: ${{ steps.scan-summary.outputs.critical-count }}
      scan-status: ${{ steps.scan-summary.outputs.scan-status }}

    steps:
      # Step 1: Checkout code for scanning
      - name: 📥 Checkout Code for Scanning
        uses: actions/checkout@v4

      # Step 2: Download scanner image
      - name: 📥 Download Scanner Image
        uses: actions/download-artifact@v4
        with:
          name: scanner-image
          path: /tmp

      # Step 3: Load Docker image
      - name: 🐳 Load Scanner Image
        run: |
          docker load --input /tmp/scanner-image.tar
          docker image ls -a

      # Step 4: Create scan results directory
      - name: 📁 Prepare Scan Environment
        run: |
          mkdir -p scan-results
          echo "SCAN_PATH=${{ github.event.inputs.scan_path || '.' }}" >> $GITHUB_ENV
          echo "FAIL_THRESHOLD=${{ github.event.inputs.fail_threshold || 'medium' }}" >> $GITHUB_ENV

      # Step 5: Run secret scanner
      - name: 🔍 Run Secret Scanner
        id: scan
        run: |
          echo "🔍 Starting secret scan..."
          echo "📂 Scan path: $SCAN_PATH"
          echo "⚡ Fail threshold: $FAIL_THRESHOLD"

          # Run scanner and capture output
          docker run --rm \
            -v "${{ github.workspace }}:/scan" \
            -v "${{ github.workspace }}/scan-results:/output" \
            ${{ env.SCANNER_IMAGE }}:latest \
            /scan/$SCAN_PATH --ci-mode --fail-on $FAIL_THRESHOLD \
            > scan-results/results.json 2>&1

        # Continue on failure to analyze results
        continue-on-error: true

      # Step 6: Process and analyze scan results
      - name: 📊 Process Scan Results
        id: scan-summary
        run: |
          if [ -f "scan-results/results.json" ]; then
            echo "📄 Processing scan results..."

            # Extract metrics from JSON using jq
            findings_count=$(cat scan-results/results.json | jq -r '.scan_metadata.total_findings // 0')
            critical_count=$(cat scan-results/results.json | jq -r '.severity_breakdown.critical // 0')
            medium_count=$(cat scan-results/results.json | jq -r '.severity_breakdown.medium // 0')
            low_count=$(cat scan-results/results.json | jq -r '.severity_breakdown.low // 0')

            # Set outputs for other jobs
            echo "findings-count=$findings_count" >> $GITHUB_OUTPUT
            echo "critical-count=$critical_count" >> $GITHUB_OUTPUT
            echo "medium-count=$medium_count" >> $GITHUB_OUTPUT
            echo "low-count=$low_count" >> $GITHUB_OUTPUT

            # Determine scan status
            if [ "$findings_count" -eq 0 ]; then
              scan_status="PASSED"
            else
              scan_status="FAILED"
            fi
            echo "scan-status=$scan_status" >> $GITHUB_OUTPUT

            # Create detailed job summary
            echo "## 🔍 Secret Scanning Results" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            if [ "$findings_count" -eq 0 ]; then
              echo "✅ **No secrets detected!** Your code is secure and ready for deployment." >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "🚀 **Status: APPROVED** - Safe to merge and deploy" >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️  **$findings_count potential secret(s) found!**" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### 🛡️ Security Breakdown:" >> $GITHUB_STEP_SUMMARY
              echo "- 🔴 **Critical:** $critical_count secrets" >> $GITHUB_STEP_SUMMARY
              echo "- 🟡 **Medium:** $medium_count secrets" >> $GITHUB_STEP_SUMMARY  
              echo "- 🔵 **Low:** $low_count secrets" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### ⚠️ **Action Required:**" >> $GITHUB_STEP_SUMMARY
              echo "1. Review detected secrets in the detailed results" >> $GITHUB_STEP_SUMMARY
              echo "2. Remove secrets from source code immediately" >> $GITHUB_STEP_SUMMARY
              echo "3. Use environment variables or secure vaults" >> $GITHUB_STEP_SUMMARY
              echo "4. Rotate any exposed credentials" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**🛑 Status: BLOCKED** - This PR cannot be merged until secrets are resolved" >> $GITHUB_STEP_SUMMARY
            fi

            # Add scan metadata
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📊 Scan Details:" >> $GITHUB_STEP_SUMMARY
            echo "- **Scanner Version:** $(cat scan-results/results.json | jq -r '.scan_metadata.scanner_version // "unknown"')" >> $GITHUB_STEP_SUMMARY
            echo "- **Scan Timestamp:** $(cat scan-results/results.json | jq -r '.scan_metadata.scan_timestamp // "unknown"')" >> $GITHUB_STEP_SUMMARY
            echo "- **Fail Threshold:** $FAIL_THRESHOLD" >> $GITHUB_STEP_SUMMARY

          else
            echo "❌ Scan results file not found!" >> $GITHUB_STEP_SUMMARY
            echo "findings-count=0" >> $GITHUB_OUTPUT
            echo "scan-status=ERROR" >> $GITHUB_OUTPUT
          fi

      # Step 7: Upload scan results as artifacts
      - name: 📤 Upload Scan Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: secret-scan-results-${{ github.run_number }}
          path: scan-results/
          retention-days: 30

      # Step 8: Generate security report comment for PRs
      - name: 💬 Comment on Pull Request
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            let comment = "## 🔍 Canary Scanner - Security Report\n\n";

            try {
              const results = JSON.parse(fs.readFileSync('scan-results/results.json', 'utf8'));
              const findingsCount = results.scan_metadata?.total_findings || 0;
              const scannerVersion = results.scan_metadata?.scanner_version || 'unknown';

              if (findingsCount === 0) {
                comment += "✅ **SECURITY SCAN PASSED**\n\n";
                comment += "No secrets detected in this pull request. The code is secure and safe to merge.\n\n";
                comment += "### 🛡️ Security Status:\n";
                comment += "- **Total Findings:** 0\n";
                comment += "- **Security Risk:** None\n";
                comment += "- **Recommendation:** ✅ **APPROVE MERGE**\n\n";
                comment += "🚀 This PR is cleared for deployment!";
              } else {
                const critical = results.severity_breakdown?.critical || 0;
                const medium = results.severity_breakdown?.medium || 0;
                const low = results.severity_breakdown?.low || 0;

                comment += "⚠️ **SECURITY SCAN FAILED**\n\n";
                comment += `🚨 **${findingsCount} potential secret(s) detected!**\n\n`;
                comment += "### 🛡️ Security Breakdown:\n";
                comment += `- 🔴 **Critical:** ${critical} findings\n`;
                comment += `- 🟡 **Medium:** ${medium} findings\n`;
                comment += `- 🔵 **Low:** ${low} findings\n\n`;
                comment += "### 🚨 **IMMEDIATE ACTION REQUIRED:**\n";
                comment += "1. **DO NOT MERGE** this PR until all secrets are removed\n";
                comment += "2. Review the detailed scan results in the workflow artifacts\n";
                comment += "3. Remove detected secrets from your source code\n";
                comment += "4. Use environment variables or secure secret management\n";
                comment += "5. Rotate any credentials that may have been exposed\n\n";
                comment += "### 📊 **Next Steps:**\n";
                comment += "- Download the detailed scan results from the workflow artifacts\n";
                comment += "- Fix all detected secrets and push new commits\n";
                comment += "- The security scan will automatically re-run on new commits\n\n";
                comment += "⛔ **Status: MERGE BLOCKED** until security issues are resolved";
              }

              comment += `\n\n---\n*🤖 Generated by Canary Scanner v${scannerVersion} | [View Workflow](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})*`;

            } catch (error) {
              comment += "❌ **Error processing scan results**\n\n";
              comment += `Unable to parse security scan results. Please check the [workflow logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.\n\n`;
              comment += "*This may indicate a configuration issue with the scanner.*";
            }

            // Post comment to PR
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      # Step 9: Set check status for PR
      - name: ✅ Update Check Status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const scanResult = '${{ steps.scan.outcome }}';
            const findingsCount = parseInt('${{ steps.scan-summary.outputs.findings-count }}') || 0;

            const checkName = 'Secret Scanning';
            const headSha = context.payload.pull_request?.head?.sha || context.sha;

            let conclusion, title, summary;

            if (scanResult === 'success' && findingsCount === 0) {
              conclusion = 'success';
              title = '✅ No secrets detected';
              summary = 'Security scan passed. No secrets found in the codebase.';
            } else {
              conclusion = 'failure';
              title = `⚠️ ${findingsCount} potential secret(s) found`;
              summary = `Security scan failed. Found ${findingsCount} potential secrets that must be addressed before merging.`;
            }

            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: checkName,
              head_sha: headSha,
              status: 'completed',
              conclusion: conclusion,
              output: {
                title: title,
                summary: summary
              }
            });

      # Step 10: Fail job if secrets detected
      - name: ❌ Fail on Secret Detection
        if: steps.scan.outcome == 'failure'
        run: |
          echo "::error::🚨 Secret scanning detected potential secrets in the codebase!"
          echo "::error::🛑 This workflow failed to prevent insecure code from being merged."
          echo "::error::📋 Please review the scan results and remove any detected secrets."
          echo "::error::🔄 Push new commits after fixing secrets to re-trigger the scan."
          exit 1

  # =================================================================
  # JOB 3: SECURITY GATE
  # =================================================================
  security-gate:
    name: 🛡️ Security Gate
    runs-on: ubuntu-latest
    needs: [build-scanner, secret-scan]
    if: always()

    steps:
      - name: 🛡️ Security Gate Decision
        run: |
          scan_result="${{ needs.secret-scan.outputs.scan-result }}"
          findings_count="${{ needs.secret-scan.outputs.findings-count }}"
          critical_count="${{ needs.secret-scan.outputs.critical-count }}"

          echo "=================================================="
          echo "🛡️  SECURITY GATE EVALUATION"
          echo "=================================================="
          echo "📊 Scan Result: $scan_result"
          echo "📊 Total Findings: $findings_count"
          echo "📊 Critical Findings: $critical_count"
          echo "=================================================="

          if [ "$scan_result" = "success" ] && [ "$findings_count" = "0" ]; then
            echo "✅ SECURITY GATE: APPROVED"
            echo "🎉 No secrets detected. Safe to proceed with deployment."
            echo "🚀 This code meets security requirements."
          else
            echo "❌ SECURITY GATE: BLOCKED"
            echo "🚨 Secrets detected or scan failed."
            echo "🛑 Deployment blocked for security reasons."
            echo "📋 Action required before proceeding."

            # Create security incident tracking (could integrate with JIRA, etc.)
            echo "🎫 Security incident should be created for tracking."

            exit 1
          fi

  # =================================================================
  # JOB 4: CLEANUP AND NOTIFICATION
  # =================================================================
  cleanup:
    name: 🧹 Cleanup & Notify
    runs-on: ubuntu-latest
    needs: [build-scanner, secret-scan, security-gate]
    if: always()

    steps:
      - name: 🧹 Cleanup Artifacts
        run: |
          echo "🧹 Cleaning up temporary artifacts..."
          # Additional cleanup logic can be added here

      - name: 📊 Workflow Summary
        run: |
          build_result="${{ needs.build-scanner.result }}"
          scan_result="${{ needs.secret-scan.result }}"
          gate_result="${{ needs.security-gate.result }}"

          echo "=================================================="
          echo "📊 WORKFLOW EXECUTION SUMMARY"
          echo "=================================================="
          echo "🐳 Build Scanner: $build_result"
          echo "🔍 Secret Scan: $scan_result"
          echo "🛡️  Security Gate: $gate_result"
          echo "=================================================="

          if [ "$gate_result" = "success" ]; then
            echo "✅ Overall Status: PASSED"
            echo "🎉 All security checks completed successfully!"
          else
            echo "❌ Overall Status: FAILED"
            echo "🚨 Security issues detected - immediate action required!"
          fi

  
    
